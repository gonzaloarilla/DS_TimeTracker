@startuml
class Client {
- createId() : String
- testB()
- testBWithPersistence()
- testLoad()
+ JSONMenu()
+ main()
}

class Search{
- logger : Logger
+ searchByTag(Project, String) : List<Node>
}

class SearchTagVisitor{
- logger : Logger
- tag : String
- nodeList : List<Node>
+ SearchTagVisitor()
+ getNodeList() : List<Node>
+ visit(Interval)
+ visit(Node)
}

abstract Node {
- name : String
- description : String
- id : int
- initialDate : LocalDateTime
- lastDate : LocalDateTime
- duration : Duration
- isActive : boolean
- parent : Node
- dateTimeFormatter : DateTimeFormatter
- nodeJSONObject : JSONObject
- tagList : List<String>
- logger : Logger
- invariant() : boolean
+ addTag(String)
+ getTaglist() : List<String>
+ getJSONObject() : JSONObject
+ setName(String)
+ getName() : String
+ setDescription(String)
+ getDescription() : String
+ getId() : String
+ startTask(String) : boolean
+ stopTask(String) : boolean
+ acceptVisit(NodeVisitor)
+ getDuration() : Duration
+ getDurationSeconds() : long
+ getLastDate() : LocalDateTime
+ getStartDate() : LocalDateTime
+ isActive(t : Task) : boolean
+ setActive()
+ setNotActive()
+ setInitialDate(LocalDateTime)
+ setLastDate(LocalDateTime)
+ setDuration(Duration)
+ toString() : String
+ updateDuration(Duration)
+ update(LocalDateTime, Duration)
+ getType() : String
+ findActivityById(int) : Node
+ toJson(int) : JSONObject

}

class Project {
- nodeList : List<Node>
- logger : Logger
- invariant() : boolean
+ getJSONObject() : JSONObject
+ addNode(Node)
+ startTask(String) : boolean
+ stopTask(String) : boolean
+ acceptVisit(NodeVisitor)
+ findActivityById(int) : Node
+ toJson(int) : JSONObject
}

class Task {
- intervalList : List<Interval>
- logger : Logger
- invariant() : boolean
+ getJSONObject() : JSONObject
+ startTask(String) : boolean
+ stopTask(String) : boolean
+ acceptVisit(NodeVisitor)
+ getJSONObject() : JSONObject
+ addInterval(Interval)
+ findActivityById(int) : Node
+ toJson(int) : JSONObject
}

class Interval {
- initialDate : LocalDateTime
- lastDate : LocalDateTime
- duration : Duration
- isActive : boolean
- parent : Node
- dateTimeFormatter : DateTimeFormatter
- nodeJSONObject : JSONObject
- logger : Logger
- invariant() : boolean
+ setInitialDate(LocalDateTime)
+ setLastDate(LocalDateTime)
+ setDuration(Duration)
+ getJSONObject() : JSONObject
+ getDurationSeconds() : long
+ getLastDate() : LocalDateTime
+ getStartDate() : LocalDateTime
+ getParent() : Node
+ isActive() : boolean
+ getType() : String
+ toString() : String
+ update(Observable, Object)
+ finish()
+ acceptVisit(NodeVisitor)
+ toJson() : JSONObject
}

class Clock {
- timer : Timer
- timerTask : TimerTask
- lastDate : LocalDateTime
- runningClock : Clock
- delay : int
- period : int
- logger : Logger
- invariant() : boolean
+ getRunningClock()
+ stopClock()
- update()
+ getPeriod()

}

class Identifier {
+ id : int
- ids : List<Integer>
+ getId() : int
+ setId(int)
+ getNextId() : int
- checkId(int) : boolean
}

class PersistenceVisitor {
- logger : Logger
- invariant() : boolean
+ visit(Node)
+ visit(Interval)
}

interface NodeVisitor {
+ visit(Node)
+ visit(Interval)
}

class PersistenceManager {
- logger : Logger
+ saveData(Node, String)
+ loadData(String) : Node
- restoreNodeStructure(Node, JSONObject) : Node
- setupNewInterval(Interval, JSONObject) : Interval
}

class MainWebServer {
+ main(String)
+ webServer()
+ makeTreeCourses() : Node
}

class WebServer {
- PORT : int
- currentNode : Node
- lastId : int
- findActivityById(int) : Node
}

Project -|> Node
Node "*" *-- "1" Project
Task -.|> Node
Clock -down-|> java.util.Observable
Interval -.down.-|> java.util.Observer
Interval "*" --* "0" Task
PersistenceVisitor -.down-|> NodeVisitor
@enduml