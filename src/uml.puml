@startuml
class Client {
- createId() : String
- testB()
- testBWithPersistence()
+ JSONMenu()
+ main()
}

abstract Node {
- name : String
- id : string
- initialDate : LocalDateTime
- lastDate : LocalDateTime
- duration : Duration
- isActive : boolean
- parent : Node
- dateTimeFormatter : DateTimeFormatter
- nodeJSONObject : JSONObject
+ getJSONObject : JSONObject
+ setName(n : String)
+ getName() : String
+ getId() : string
+ startTask() : boolean
+ stopTask() : boolean
+ acceptVisit()
+ getDuration() : Duration
+ getExactTime() : Duration
+ getDurationSeconds() : long
+ getLastDate() : LocalDateTime
+ getStartDate() : LocalDateTime
+ isActive(t : Task) : boolean
+ setActive()
+ setNotActive()
+ setInitialDate()
+ setLastDate()
+ setDuration()
+ toString() : String
+ updateDuration()
+ update()
+ getType() : String
}

class Project {
+ getJSONObject() : JSONObject
+ addNode()
+ startTask() : boolean
+ stopTask() : boolean
+ acceptVisit()
}

class Task {
+ startTask() : boolean
+ stopTask() : boolean
+ acceptVisit()
+ getJSONObject() : JSONObject
+ addInterval()
}

class Interval {
+ getJSONObject() : JSONObject
+ getParent() : Node
+ isActive() : boolean
+ toString() : string
+ update()
+ finish()
+ acceptVisit()
}

class Clock {
- timer : Timer
- timerTask : TimerTask
- lastDate : LocalDateTime
- runningClock : Clock
- delay : int
- period : int
+ getRunningClock()
+ stopClock()
- update()
+ getPeriod()
}

class NodePersistenceVisitor {
+ visit()
}

interface NodeVisitor {
+ visit()
}

class PersistenceManager {
+ saveData()
+ loadData() : Node
- restoreNodeStructure() : Node
}

Project -|> Node
Node "*" *-- "1" Project
Task -.|> Node
Clock -down-|> java.util.Observable
Interval -.down.-|> java.util.Observer
Interval "*" --* "0" Task
NodePersistenceVisitor -.down-|> NodeVisitor

@enduml
